# -------------------------------------------------------------------------
#
#                   _    _  _              __  __   ____
#                  | |  | |(_)            |  \/  | / __ \ 
#                  | |__| | _ __   __ ___ | \  / || |  | |
#                  |  __  || |\ \ / // _ \| |\/| || |  | |
#                  | |  | || | \ V /|  __/| |  | || |__| |
#                  |_|  |_||_|  \_/  \___||_|  |_| \___\_\
#
# -------------------------------------------------------------------------
#
# HiveMQ default configuration.properties
#
# -------------------------------------------------------------------------
#
# Global
#
# -------------------------------------------------------------------------

# The IP address on which HiveMQ will be bound
#only listen for plaintext on localhost
global.ipAddress=127.0.0.1

# The port on which HiveMQ will listen
global.port=1883

# Time in seconds to wait before resending an outgoing QoS=1 
# or QoS=2 message
global.retryInterval=10

# The maximum length of client ID. The MQTT v3.1 spec defines a limit of 23.
# If this is not enough for your use case, set it to a higher limit
global.maxClientIdLength=65535

# If enabled, HiveMQ checks if a new HiveMQ version is available once a day
global.checkForUpdates=true

# The maximum number of QoS 1 or 2 messages that can be in the process
# of being transmitted simultaneously. This includes messages currently
# going through handshakes and messages that are being retried. Set to 0
# for no maximum. If set to 1, this will guarantee in-order delivery of
# messages for QoS1 und QoS2.
messages.maxInflight=20

# The maximum number of queued (QoS 1 + 2) messages per client. When messages can't be processed because
# the maximum numbers of in-flight messages are processed right now, the messages will be queued for later processing.
# If the number of maxQueued messages is reached, all new incoming messages to deliver will be discarded for the client.
# Set to 0 if you don't want messages to get discarded.
messages.maxQueued=1000

# -------------------------------------------------------------------------
#
# $SYS
#
# -------------------------------------------------------------------------

# If the $SYS tree should be available or not. Use true if you
# want to enable statistics
sys.enabled=true

# Time in seconds between publishes of the $SYS tree
sys.interval=60

# -------------------------------------------------------------------------
#
# Cluster
#
# -------------------------------------------------------------------------

# Enables or disables cluster support
cluster.enabled=false

# -------------------------------------------------------------------------
#
# SSL
#
# -------------------------------------------------------------------------

# Enables or disables SSL support
ssl.enabled=true

# The IP address on MQTT over TLS/SSL will be bound
ssl.ipAddress=0.0.0.0

# The port where HiveMQ will expect SSL encrypted connections
ssl.port=8883

# The cryptographic protocol which should be used for the secure communication between HiveMQ and its clients. Defaults to TLS.
#Depending on your Java Version you can try: SSLv3, TLS, TLSv1, TLSv1.1, TLSv1.2
ssl.protocol=TLSv1.2

# The location of the servers key store
keystore.location=/hivemq/conf/shareplaylearn_mqtt.jks

# The password for the keystore of the server. Defaults to no password
keystore.password=[PASSWORD FOR JKS file with public & private keys]


# The location of the trust store
truststore.location=/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/cacerts

# The password for the truststore. Defaults to no password.
truststore.password=changeit

# Enables or disables SSL client certificate authentication on the 
# application layer. This does NOT affect transport client authentication.
# Essentially this enables HiveMQ plugins to provide permissions for users
# with specific client certificates.
ssl.applicationClientAuthentication=false

# Sets the client authentication mode. Allowed values are: none, optional 
# and required
ssl.clientAuthenticationMode=none

# The timeout for a SSL handshake. All clients which need longer for 
# a handshake than the specified timeout will be disconnected. 
# If not specified, no timeout is set.
ssl.handshakeTimeout=0

# If the hybrid mode is enabled and SSL is activated, SSL and standard
# TCP connections are supported simultaneously
ssl.hybridMode=true

# -------------------------------------------------------------------------
#
# Websockets
#
# -------------------------------------------------------------------------

# This property enables websocket support for HiveMQ
websockets.enabled=true

# The IP address on which websockets will be bound
websockets.ipAddress=0.0.0.0

# The port used for websockets. Defaults to 8000
websockets.port=8000

# The subprotocol used for websockets. When using Paho.js this should be mqttv3.1
websockets.subProtocol=mqttv3.1

# The path of the websocket
websockets.path=/mqtt

# Defines if websocket extensions are allowed.
websockets.allowExtensions=false

# The maximum content length of a chunked HTTP request
websockets.maxHttpChunkContentLength=65536

# When set to true, enables secure websockets for HiveMQ
websockets.secure.enabled=false

# The IP address on which secure websockets will be bound
websockets.secure.ipAddress=0.0.0.0

# The port for the secure websockets
websockets.secure.port=8001

# -------------------------------------------------------------------------
#
# Plugins
#
# -------------------------------------------------------------------------

# Low level callbacks are callbacks which include all existing MQTT command 
# messages, like PubRec, PubRel, etc. If your plugin needs to react to each 
# individual MQTT command message, set this to true and all callbacks are 
# available. In most cases the low level callbacks are not needed, only 
# activate them if you really use them, otherwise this is influencing the
# performance. 
plugin.LowLevelCallbacksEnabled = false

# -------------------------------------------------------------------------
#
# Statistics
#
# -------------------------------------------------------------------------

# Interval in seconds for the statistics callback. Used for the 
# callback of plugins which are interested in HiveMQ statistics.
statistics.callbackInterval=60

# If statistics are enabled or not. If you disable statistics, 
# the $SYS topic is also disabled.
statistics.enabled=true

# Interval in seconds for updating statistics internally. 
# Too low intervals could result in performance loss. It is 
# recommended, that the statistics_update_interval is smaller
# than the sys_interval and the statistics_callback_interval
statistics.updateInterval=30

# -------------------------------------------------------------------------
#
# Measurement of Resource Consumption
#
# -------------------------------------------------------------------------

# Enables the resource consumption logging
measureResourceConsumption.enabled=false

# Time in seconds between logging of the resource consumption
measureResourceConsumption.interval=60

# -------------------------------------------------------------------------
#
# Graphite Monitoring
#
# -------------------------------------------------------------------------

# Enable the monitoring with Graphite
graphite.enabled=false

# The interval for publishing metrics to Graphite in seconds. 
# Too low intervals could results in possible performance losses.
graphite.interval=10

# The Graphite URL. Must be in the format "hostname:port"
graphite.url=localhost:2003

# A prefix for every metric which is sent to the Graphite instance.
#Useful for distinguishing between different HiveMQ servers or
#when using a hosted Graphite service to prefix the API Key
graphite.metricPrefix=


# -------------------------------------------------------------------------
#
# Non-standard MQTT behaviour
#
# -------------------------------------------------------------------------

#If this feature is enabled, HiveMQ will send Last-Will-And-Testament
#messages on all client disconnects, even graceful disconnects with a
#prior DISCONNECT message. This is a non-standard MQTT behaviour,
#only enable it if you really want this behaviour.

mqtt.lwt.onEveryDisconnect=false
